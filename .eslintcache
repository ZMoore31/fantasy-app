[{"/Users/zmoore/Documents/fantasy/fantasy-app/src/index.js":"1","/Users/zmoore/Documents/fantasy/fantasy-app/src/App.js":"2","/Users/zmoore/Documents/fantasy/fantasy-app/src/reportWebVitals.js":"3"},{"size":500,"mtime":1606349292379,"results":"4","hashOfConfig":"5"},{"size":24757,"mtime":1606589212408,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1606349292381,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fupobm",{"filePath":"10","messages":"11","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zmoore/Documents/fantasy/fantasy-app/src/index.js",[],"/Users/zmoore/Documents/fantasy/fantasy-app/src/App.js",["15","16","17","18","19","20","21","22","23","24","25"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport axios from \"axios\";\nimport NormalDistribution from 'gaussian';\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nimport './App.css';\n\nconst limitList = (data, limit = null) => {\n  let temp;\n  if (limit < data.length) {\n    temp = data.slice(-limit);\n  } else {\n    temp = data;\n  }\n  return temp;\n};\n\nconst avg = (data, limit = null) => {\n  const tempData = limitList(data, limit);\n  const sum = tempData.reduce((a, b) => {\n    return a + b;\n  }, 0);\n  return sum / tempData.length;\n};\n\nconst getStats = (data, limit = null) => {\n  const tempData = limitList(data, limit);\n  const average = avg(tempData);\n  const squareDiffs = tempData.map(value => (value - average) ** 2);\n  return { average: average, variance: avg(squareDiffs) };\n};\n\nconst getItem = (list, matchValue, matchField) => {\n  const index = list.map(temp => temp[matchField]).indexOf(matchValue)\n  return list[index]\n}\n\nconst generateNormalData = (normal) => {\n  let data = []\n  for (let i = 0; i <= 200; i++) {\n    data.push({ name: i, away: normal[0].pdf(i), home: normal[1].pdf(i), diff: normal[2].pdf(i - 100) })\n  }\n  return (data)\n}\n\nconst generateSimulationScores = (teams, futureSchedule) => {\n  return futureSchedule.map(obj => {\n    const awayTeam = getItem(teams, obj.away.teamId, 'id')\n    const awayDist = NormalDistribution(awayTeam.average, awayTeam.variance)\n    const homeTeam = getItem(teams, obj.home.teamId, 'id')\n    const homeDist = NormalDistribution(homeTeam.average, homeTeam.variance)\n    obj.away.totalPoints = awayDist.ppf(Math.random())\n    obj.home.totalPoints = homeDist.ppf(Math.random())\n    let winner\n    if (obj.away.totalPoints > obj.home.totalPoints) {\n      winner = 'AWAY'\n    } else {\n      winner = 'HOME'\n    }\n    obj.winner = winner\n    return obj\n  })\n}\n\nconst calcPlayoffRankings = (teams) => {\n  if (teams.length !== 0) {\n    const division1Winner = teams.filter(obj => obj.divisionId === 0).sort((a, b) => {\n      if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n        return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n      }\n      return b.record.calculated.wins - a.record.calculated.wins\n    })[0]\n    const division2Winner = teams.filter(obj => obj.divisionId === 1).sort((a, b) => {\n      if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n        return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n      }\n      return b.record.calculated.wins - a.record.calculated.wins\n    })[0]\n    const divisionWinners = [division1Winner, division2Winner].sort((a, b) => {\n      if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n        return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n      }\n      return b.record.calculated.wins - a.record.calculated.wins\n    })\n    const nonWinners = teams.filter(obj => {\n      return !divisionWinners.includes(obj)\n    }).sort((a, b) => {\n      if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n        return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n      }\n      return b.record.calculated.wins - a.record.calculated.wins\n    })\n    let playoffRankings = [...divisionWinners, ...nonWinners]\n    playoffRankings = playoffRankings.map((obj, index) => {\n      obj.playoffSeed = index + 1;\n      return obj;\n    })\n    return playoffRankings.sort((a, b) => {\n      return a.playoffSeed - b.playoffSeed\n    });\n  }\n  return []\n}\n\nconst calcRecords = (results, teams) => {\n  let data = teams.map(obj => {\n    return { ...obj, record: { ...obj.record, calculated: { wins: 0, losses: 0, pointsFor: 0, pointsAgainst: 0 } } }\n  })\n  const indexes = teams.reduce((map, obj, ind) => {\n    map[obj.id] = ind\n    return map\n  }, {})\n  for (let x in results) {\n    const game = results[x]\n    if (game.winner === \"AWAY\") {\n      data[indexes[game.away.teamId]].record.calculated.wins += 1\n      data[indexes[game.home.teamId]].record.calculated.losses += 1\n    } else {\n      data[indexes[game.home.teamId]].record.calculated.wins += 1\n      data[indexes[game.away.teamId]].record.calculated.losses += 1\n    }\n    data[indexes[game.home.teamId]].record.calculated.pointsFor += game.home.totalPoints\n    data[indexes[game.home.teamId]].record.calculated.pointsAgainst += game.away.totalPoints\n    data[indexes[game.away.teamId]].record.calculated.pointsFor += game.away.totalPoints\n    data[indexes[game.away.teamId]].record.calculated.pointsAgainst += game.home.totalPoints\n  }\n  data = calcPlayoffRankings(data)\n  return data\n}\n\nfunction App() {\n  const [currentWeek, updateCurrentWeek] = useState(null);\n  const [currentWeekSchedule, updateCurrentSchedule] = useState([]);\n  const [league, updateLeague] = useState(\"78513283\");\n  const [year, updateYear] = useState(2020);\n  const [teams, updateTeams] = useState([]);\n  const [futureSchedule, updateFutureSchedule] = useState([]);\n  const [pastSchedule, updatePastSchedule] = useState([]);\n  const [selectedMatchup, updateMatchup] = useState(null)\n  const [away, updateAway] = useState({})\n  const [home, updateHome] = useState({})\n  const [awayNormDist, updateAwayNormDist] = useState(null)\n  const [homeNormDist, updateHomeNormDist] = useState(null)\n  const [normDist, updateNormDist] = useState(null)\n  const [awayRandom, updateAwayRandom] = useState(Math.random())\n  const [homeRandom, updateHomeRandom] = useState(Math.random())\n  const [graphData, updateGraphData] = useState([])\n  const [simulatedData, updateSimulation] = useState([])\n  const [numberOfSims, updateNumberOfSims] = useState(10000)\n  const [weeksForProj, updateWeeksForPro] = useState(5)\n\n  const refresh = () => {\n    updateAwayRandom(Math.random())\n    updateHomeRandom(Math.random())\n  }\n\n  const simulation = () => {\n    let results = []\n    let data = []\n    for (let i = 1; i <= numberOfSims; i++) {\n      const future = generateSimulationScores(teams, futureSchedule)\n      const sim = calcRecords([...pastSchedule, ...future], teams)\n      results.push([...pastSchedule, ...future])\n      data.push(sim)\n    }\n    let aggData = teams.map(obj => {\n      return { ...obj, playoffSeed: 0, playoffMatrix: {}, record: { ...obj.record, calculated: { wins: 0, losses: 0, pointsFor: 0, pointsAgainst: 0 } } }\n    })\n    const aggIndexes = teams.reduce((map, obj, ind) => {\n      map[obj.id] = ind\n      return map\n    }, {})\n    for (let x in data) {\n      const indexes = data[x].reduce((map, obj, ind) => {\n        map[obj.id] = ind\n        return map\n      }, {})\n      for (let y in data[x]) {\n        aggData[aggIndexes[data[x][y].id]].playoffSeed += data[x][indexes[data[x][y].id]].playoffSeed / numberOfSims\n        aggData[aggIndexes[data[x][y].id]].playoffMatrix[data[x][indexes[data[x][y].id]].playoffSeed] = (aggData[aggIndexes[data[x][y].id]].playoffMatrix[data[x][indexes[data[x][y].id]].playoffSeed] || 0) + 1 / numberOfSims;\n        aggData[aggIndexes[data[x][y].id]].record.calculated.wins += data[x][indexes[data[x][y].id]].record.calculated.wins / numberOfSims\n        aggData[aggIndexes[data[x][y].id]].record.calculated.losses += data[x][indexes[data[x][y].id]].record.calculated.losses / numberOfSims\n        aggData[aggIndexes[data[x][y].id]].record.calculated.pointsFor += data[x][indexes[data[x][y].id]].record.calculated.pointsFor / numberOfSims\n        aggData[aggIndexes[data[x][y].id]].record.calculated.pointsAgainst += data[x][indexes[data[x][y].id]].record.calculated.pointsAgainst / numberOfSims\n      }\n    }\n    console.log(aggData)\n    updateSimulation(aggData.sort((a, b) => {\n      return a.playoffSeed - b.playoffSeed\n    }))\n  }\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${league}?view=mTeam`\n      )\n      .then(res => {\n        updateCurrentWeek(Number(res.data.scoringPeriodId));\n        // updateCurrentWeek(3);\n        updateTeams(res.data.teams);\n      });\n  }, [league, year]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${league}?view=mMatchup&view=mMatchupScore`\n      )\n      .then(res => {\n        const currentSched = res.data.schedule.filter(obj => {\n          return obj.matchupPeriodId === currentWeek\n        })\n        updateCurrentSchedule(\n          currentSched\n        );\n        updateFutureSchedule(res.data.schedule.filter(obj => {\n          return obj.matchupPeriodId >= currentWeek\n        }))\n        updatePastSchedule(res.data.schedule.filter(obj => {\n          return obj.matchupPeriodId < currentWeek\n        }))\n        if (currentSched.length > 0) {\n          updateMatchup(\n            currentSched[0].id\n          )\n        }\n      });\n  }, [league, year, currentWeek]);\n\n  useEffect(() => {\n    const dataHome = pastSchedule.map(obj => {\n      return {\n        id: obj.id,\n        week: obj.matchupPeriodId,\n        teamId: obj.home.teamId,\n        totalPoints: obj.home.totalPoints\n      };\n    });\n    const dataAway = pastSchedule.map(obj => {\n      return {\n        id: obj.id,\n        week: obj.matchupPeriodId,\n        teamId: obj.away.teamId,\n        totalPoints: obj.away.totalPoints\n      };\n    });\n    const data = dataHome.concat(dataAway);\n    const updatedTeams = teams.map(obj => {\n      const stats = getStats(\n        data.sort((a, b) => {\n          return a.week - b.week;\n        })\n          .filter(obj2 => {\n            return obj2.teamId === obj.id;\n          })\n          .map(obj3 => obj3.totalPoints), weeksForProj\n      )\n\n      return { ...obj, average: stats.average, variance: stats.variance }\n    })\n    const calcedTeams = calcRecords(pastSchedule, updatedTeams)\n    updateTeams(calcedTeams)\n  }, [pastSchedule])\n\n  useEffect(() => {\n    try {\n      const tempAway = getItem(teams, getItem(currentWeekSchedule, Number(selectedMatchup), 'id').away.teamId, 'id')\n      updateAway(tempAway)\n      const tempHome = getItem(teams, getItem(currentWeekSchedule, Number(selectedMatchup), 'id').home.teamId, 'id')\n      updateHome(tempHome)\n      if (tempHome.average && tempAway.average) {\n        const newAwayNormDist = NormalDistribution(tempAway.average, tempAway.variance);\n        updateAwayNormDist(newAwayNormDist)\n        const newHomeNormDist = NormalDistribution(tempHome.average, tempHome.variance);\n        updateHomeNormDist(newHomeNormDist)\n        const newNormDist = NormalDistribution(tempHome.average - tempAway.average, tempHome.variance + tempAway.variance);\n        updateNormDist(newNormDist)\n        const newGraphData = generateNormalData([newAwayNormDist, newHomeNormDist, newNormDist])\n        updateGraphData(newGraphData)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }, [selectedMatchup, currentWeekSchedule, teams])\n\n  if (teams.length === 0) {\n    return <div>Getting team data...</div>\n  }\n\n  if (pastSchedule.length === 0) {\n    return <div>Getting historical data...</div>\n  }\n\n  if (!selectedMatchup) {\n    return <div>Getting matchup data...</div>\n  }\n\n  if (!teams[0].record.calculated) {\n    return <div>Calculating...</div>\n  }\n\n  return (\n    <div>\n      <div className='row centerRow'>\n        <select name=\"matchUp\" className=\"matchUpSelect\" value={selectedMatchup} onChange={event => updateMatchup(event.target.value)}>\n          {currentWeekSchedule.map(obj => {\n            const awayTeam = getItem(teams, obj.away.teamId, 'id')\n            const homeTeam = getItem(teams, obj.home.teamId, 'id')\n            if (!homeTeam || !awayTeam) {\n              return null\n            }\n            return <option value={obj.id}>{awayTeam.location} {awayTeam.nickname} vs {homeTeam.location} {homeTeam.nickname}</option>\n          })}\n        </select>\n      </div>\n      <div className='row fullWidth spaceEvenly'>\n        <div className='table'>\n          {away.average && away.variance && home.average && home.variance && <div className='row'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              <div className='nameCell'>{away.location} {away.nickname}</div>\n              <div className='nameCell'>{home.location} {home.nickname}</div>\n            </div>\n            <div className='col valueCells'>\n              <div className='row row-header'><div className='valueCell'>Proj Points</div><div className='valueCell'>Standard Deviation</div><div className='valueCell'>Win %</div></div>\n              <div className='row'><div className='valueCell'>{away.average.toFixed(2)}</div><div className='valueCell'>{Math.sqrt(away.variance).toFixed(2)}</div><div className='valueCell'>{(normDist.cdf(0) * 100).toFixed(2)}%</div></div>\n              <div className='row'><div className='valueCell'>{home.average.toFixed(2)}</div><div className='valueCell'>{Math.sqrt(home.variance).toFixed(2)}</div><div className='valueCell'>{((1 - normDist.cdf(0)) * 100).toFixed(2)}%</div></div>\n            </div>\n          </div>}\n        </div>\n      </div>\n      <div className='row fullWidth spaceEvenly' >\n        <div className='graphContainer'>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart\n              data={graphData}\n              margin={{\n                top: 24, right: 56, left: 40, bottom: 8,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" type='number' />\n              <YAxis tickFormatter={formatYAxis} />\n              <Legend />\n              <Line type=\"monotone\" strokeWidth={3} dataKey=\"away\" stroke=\"#CC0014\" name={`${away.location} ${away.nickname}`} dot={false} />\n              <Line type=\"monotone\" strokeWidth={3} dataKey=\"home\" stroke=\"#31572c\" name={`${home.location} ${home.nickname}`} dot={false} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className='graphContainer'>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart\n              data={graphData}\n              margin={{\n                top: 24, right: 56, left: 40, bottom: 8,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" type='number' tickFormatter={formatDiffXAxis} />\n              <YAxis tickFormatter={formatYAxis} />\n              <Legend />\n              <Line type=\"monotone\" strokeWidth={3} dataKey=\"diff\" stroke=\"#000\" name={`${home.location} ${home.nickname} - ${away.location} ${away.nickname}`} dot={false} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n      <div className='row fullWidth spaceEvenly'>\n        <div className='table'>\n          <div className='fullWidth header'>Guy's Division</div>\n          <div className='row'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              {teams.filter(obj => obj.divisionId === 0).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className='nameCell'>{obj.location} {obj.nickname}</div>\n\n              })}\n            </div>\n            <div className='col valueCells'>\n              <div className=\"row row-header\"><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n              {teams.filter(obj => obj.divisionId === 0).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className=\"row\"><div className='valueCell'>{obj.record.calculated.wins}</div><div className='valueCell'>{obj.record.calculated.losses}</div><div className='valueCell'>{obj.record.calculated.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsAgainst.toFixed(2)}</div></div>\n\n              })}\n            </div>\n          </div>\n        </div>\n        <div className='table'>\n          <div className='fullWidth header'>Girl's Division</div>\n          <div className='row'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              {teams.filter(obj => obj.divisionId === 1).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className='nameCell'>{obj.location} {obj.nickname}</div>\n\n              })}\n            </div>\n            <div className='col valueCells'>\n              <div className=\"row row-header\"><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n              {teams.filter(obj => obj.divisionId === 1).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className=\"row\"><div className='valueCell'>{obj.record.calculated.wins}</div><div className='valueCell'>{obj.record.calculated.losses}</div><div className='valueCell'>{obj.record.calculated.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsAgainst.toFixed(2)}</div></div>\n\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='table playoffs'>\n        <div className='fullWidth header'>Playoff Rankings</div>\n        <div className='row fullWidth centerRow row-header'><div className='nameCell'>Team Name</div><div className='valueCell'>Playoff Seed</div></div>\n        {teams.map(obj => {\n          return <div className='row fullWidth centerRow'><div className='nameCell'>{obj.location} {obj.nickname}</div><div className='valueCell'>{obj.playoffSeed.toFixed(2)}</div></div>\n        })}\n      </div>\n      <div className='row fullWidth centerRow' style={{margin: '24px 0 8px 0'}}><button onClick={simulation}>{simulatedData.length ? \"Refresh\" : \"Run\"} Simulation</button></div>\n      {simulatedData.length ? <Fragment><div className='row fullWidth spaceEvenly'>\n        <div className='table'>\n          <div className='fullWidth header'>Projected Guy's Division</div>\n          <div className='row'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              {simulatedData.filter(obj => obj.divisionId === 0).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className='nameCell'>{obj.location} {obj.nickname}</div>\n\n              })}\n            </div>\n            <div className='col valueCells'>\n              <div className=\"row row-header\"><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n              {simulatedData.filter(obj => obj.divisionId === 0).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className=\"row\"><div className='valueCell'>{obj.record.calculated.wins.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.losses.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsAgainst.toFixed(2)}</div></div>\n\n              })}\n            </div>\n          </div>\n        </div>\n        <div className='table'>\n          <div className='fullWidth header'>Projected Girl's Division</div>\n          <div className='row'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              {simulatedData.filter(obj => obj.divisionId === 1).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className='nameCell'>{obj.location} {obj.nickname}</div>\n\n              })}\n            </div>\n            <div className='col valueCells'>\n              <div className=\"row row-header\"><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n              {simulatedData.filter(obj => obj.divisionId === 1).sort((a, b) => {\n                if (b.record.calculated.wins - a.record.calculated.wins === 0) {\n                  return b.record.calculated.pointsFor - a.record.calculated.pointsFor\n                }\n                return b.record.calculated.wins - a.record.calculated.wins\n              }).map(obj => {\n                return <div className=\"row\"><div className='valueCell'>{obj.record.calculated.wins.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.losses.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.calculated.pointsAgainst.toFixed(2)}</div></div>\n\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n\n        <div className='table'>\n          <div className='fullWidth header'>Projected Playoff Rankings</div>\n          <div className='row centerRow'>\n            <div className='col'>\n              <div className='row row-header'><div className='nameCell'>Team Name</div></div>\n              {simulatedData.map(obj => {\n                return (\n\n                  <div className='nameCell'>{obj.location} {obj.nickname}</div>\n                )\n              })}\n            </div>\n            <div className='col valueCells'>\n              <div className='row row-header'>\n                <div className='valueCell'>Avg Playoff Seed</div>\n                <div className='valueCell'>Playoff %</div>\n                {simulatedData.map((_, index) => {\n                  return <div className='valueCell'>{index + 1}</div>\n                })}\n              </div>\n              {simulatedData.map(obj => {\n                return (\n                  <div className='row'>\n                    <div className='valueCell'>{obj.playoffSeed.toFixed(2)}</div>\n                    <div className='valueCell'>{(Object.values(obj.playoffMatrix).reduce((a, b, index) => {\n                      if (Object.keys(obj.playoffMatrix)[index] <= 6) {\n                        return a + b\n                      }\n                      return a\n                    }, 0) * 100).toFixed(2)}%</div>\n                    {simulatedData.map((_, index) => {\n                      if (obj.playoffMatrix[index + 1]) {\n                        return <div className='valueCell'>{(obj.playoffMatrix[index + 1] * 100).toFixed(2)}%</div>\n                      }\n                      return <div className='valueCell'>-</div>\n                    })}\n                  </div>)\n              })}\n            </div>\n          </div>\n        </div>\n      </Fragment>: null}\n    </div>\n  );\n}\n\nconst formatYAxis = (tickItem) => {\n  return `${(tickItem * 100).toFixed(2)}%`\n}\n\nconst formatDiffXAxis = (tickItem) => {\n  return tickItem - 100\n}\n\nexport default App;\n","/Users/zmoore/Documents/fantasy/fantasy-app/src/reportWebVitals.js",[],{"ruleId":"26","severity":1,"message":"27","line":5,"column":70,"nodeType":"28","messageId":"29","endLine":5,"endColumn":77},{"ruleId":"26","severity":1,"message":"30","line":136,"column":18,"nodeType":"28","messageId":"29","endLine":136,"endColumn":30},{"ruleId":"26","severity":1,"message":"31","line":137,"column":16,"nodeType":"28","messageId":"29","endLine":137,"endColumn":26},{"ruleId":"26","severity":1,"message":"32","line":144,"column":10,"nodeType":"28","messageId":"29","endLine":144,"endColumn":22},{"ruleId":"26","severity":1,"message":"33","line":145,"column":10,"nodeType":"28","messageId":"29","endLine":145,"endColumn":22},{"ruleId":"26","severity":1,"message":"34","line":147,"column":10,"nodeType":"28","messageId":"29","endLine":147,"endColumn":20},{"ruleId":"26","severity":1,"message":"35","line":148,"column":10,"nodeType":"28","messageId":"29","endLine":148,"endColumn":20},{"ruleId":"26","severity":1,"message":"36","line":151,"column":24,"nodeType":"28","messageId":"29","endLine":151,"endColumn":42},{"ruleId":"26","severity":1,"message":"37","line":152,"column":24,"nodeType":"28","messageId":"29","endLine":152,"endColumn":41},{"ruleId":"26","severity":1,"message":"38","line":154,"column":9,"nodeType":"28","messageId":"29","endLine":154,"endColumn":16},{"ruleId":"39","severity":1,"message":"40","line":266,"column":6,"nodeType":"41","endLine":266,"endColumn":20,"suggestions":"42"},"no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","'updateLeague' is assigned a value but never used.","'updateYear' is assigned a value but never used.","'awayNormDist' is assigned a value but never used.","'homeNormDist' is assigned a value but never used.","'awayRandom' is assigned a value but never used.","'homeRandom' is assigned a value but never used.","'updateNumberOfSims' is assigned a value but never used.","'updateWeeksForPro' is assigned a value but never used.","'refresh' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'teams' and 'weeksForProj'. Either include them or remove the dependency array.","ArrayExpression",["43"],{"desc":"44","fix":"45"},"Update the dependencies array to be: [pastSchedule, teams, weeksForProj]",{"range":"46","text":"47"},[9813,9827],"[pastSchedule, teams, weeksForProj]"]