[{"/Users/zmoore/Documents/fantasy/fantasy-app/src/index.js":"1","/Users/zmoore/Documents/fantasy/fantasy-app/src/App.js":"2","/Users/zmoore/Documents/fantasy/fantasy-app/src/reportWebVitals.js":"3"},{"size":500,"mtime":1606349292379,"results":"4","hashOfConfig":"5"},{"size":10168,"mtime":1606409620491,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1606349292381,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fupobm",{"filePath":"10","messages":"11","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zmoore/Documents/fantasy/fantasy-app/src/index.js",[],"/Users/zmoore/Documents/fantasy/fantasy-app/src/App.js",["15","16","17","18","19","20","21","22","23","24"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport axios from \"axios\";\nimport NormalDistribution from 'gaussian';\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nimport './App.css';\n\nconst limitList = (data, limit = null) => {\n  let temp;\n  if (limit < data.length) {\n    temp = data.slice(-limit);\n  } else {\n    temp = data;\n  }\n  return temp;\n};\n\nconst avg = (data, limit = null) => {\n  const tempData = limitList(data, limit);\n  const sum = tempData.reduce((a, b) => {\n    return a + b;\n  }, 0);\n  return sum / tempData.length;\n};\n\nconst getStats = (data, limit = null) => {\n  const tempData = limitList(data, limit);\n  const average = avg(tempData);\n  const squareDiffs = tempData.map(value => (value - average) ** 2);\n  return { average: average, variance: avg(squareDiffs) };\n};\n\nconst getItem = (list, matchValue, matchField) => {\n  const index = list.map(temp => temp[matchField]).indexOf(matchValue)\n  return list[index]\n}\n\nconst generateNormalData = (normal) => {\n  let data = []\n  for (let i = 0; i <= 200; i++) {\n    data.push({ name: i, away: normal[0].pdf(i), home: normal[1].pdf(i) })\n  }\n  console.log(data)\n  return (data)\n}\n\n// const simulateRegularSeason = (teamDetails, remainingSchedule)\n\nfunction App() {\n  const [currentWeek, updateCurrentWeek] = useState(null);\n  const [currentWeekSchedule, updateCurrentSchedule] = useState([]);\n  const [league, updateLeague] = useState(\"78513283\");\n  const [year, updateYear] = useState(2020);\n  const [teams, updateTeams] = useState([]);\n  const [schedule, updateSchedule] = useState([]);\n  const [selectedMatchup, updateMatchup] = useState(null)\n  const [away, updateAway] = useState({})\n  const [home, updateHome] = useState({})\n  const [awayNormDist, updateAwayNormDist] = useState(null)\n  const [homeNormDist, updateHomeNormDist] = useState(null)\n  const [normDist, updateNormDist] = useState(null)\n  const [awayRandom, updateAwayRandom] = useState(Math.random())\n  const [homeRandom, updateHomeRandom] = useState(Math.random())\n  const [graphData, updateGraphData] = useState([])\n\n  const refresh = () => {\n    updateAwayRandom(Math.random())\n    updateHomeRandom(Math.random())\n  }\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${league}?view=mTeam`\n      )\n      .then(res => {\n        updateCurrentWeek(Number(res.data.scoringPeriodId));\n        updateTeams(res.data.teams);\n      });\n  }, [league, year]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${year}/segments/0/leagues/${league}?view=mMatchup&view=mMatchupScore`\n      )\n      .then(res => {\n        const dataHome = res.data.schedule.map(obj => {\n          return {\n            id: obj.id,\n            week: obj.matchupPeriodId,\n            teamId: obj.home.teamId,\n            totalPoints: obj.home.totalPoints\n          };\n        });\n        const dataAway = res.data.schedule.map(obj => {\n          return {\n            id: obj.id,\n            week: obj.matchupPeriodId,\n            teamId: obj.away.teamId,\n            totalPoints: obj.away.totalPoints\n          };\n        });\n        const data = dataHome.concat(dataAway);\n        updateSchedule(\n          data\n            .sort((a, b) => {\n              return a.week - b.week;\n            })\n            .filter(obj => {\n              return obj.week < currentWeek;\n            })\n        );\n        const currentSched = res.data.schedule.filter(obj => {\n          return obj.matchupPeriodId === currentWeek\n        })\n        updateCurrentSchedule(\n          currentSched\n        );\n        if (currentSched.length > 0) {\n          updateMatchup(\n            currentSched[0].id\n          )\n        }\n      });\n  }, [league, year, currentWeek]);\n\n  useEffect(() => {\n    const updatedTeams = teams.map(obj => {\n      const stats = getStats(\n        schedule\n          .filter(obj2 => {\n            return obj2.teamId === obj.id;\n          })\n          .map(obj3 => obj3.totalPoints)\n      )\n\n      return { ...obj, average: stats.average, variance: stats.variance }\n    })\n    updateTeams(updatedTeams)\n  }, [schedule])\n\n  useEffect(() => {\n    try {\n      const tempAway = getItem(teams, getItem(currentWeekSchedule, Number(selectedMatchup), 'id').away.teamId, 'id')\n      updateAway(tempAway)\n      const tempHome = getItem(teams, getItem(currentWeekSchedule, Number(selectedMatchup), 'id').home.teamId, 'id')\n      updateHome(tempHome)\n      if (tempHome.average && tempAway.average) {\n        const newAwayNormDist = NormalDistribution(tempAway.average, tempAway.variance);\n        updateAwayNormDist(newAwayNormDist)\n        const newHomeNormDist = NormalDistribution(tempHome.average, tempHome.variance);\n        updateHomeNormDist(newHomeNormDist)\n        const newNormDist = NormalDistribution(tempHome.average - tempAway.average, tempHome.variance + tempAway.variance);\n        updateNormDist(newNormDist)\n        const newGraphData = generateNormalData([newAwayNormDist, newHomeNormDist])\n        updateGraphData(newGraphData)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }, [selectedMatchup, currentWeekSchedule, teams])\n\n  if (teams.length === 0 || schedule.length === 0 || !selectedMatchup) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>\n      {/* {teams.map(obj => (\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div>\n            <span>{obj.id} </span>\n            <span>{obj.location} </span>\n            <span>{obj.nickname}</span>\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            {schedule\n              .filter(obj2 => {\n                return obj2.teamId === obj.id;\n              })\n              .map(obj3 => (\n                <div>\n                  <div>{obj3.totalPoints}</div>\n                </div>\n              ))}\n          </div>\n          <div>\n            {obj.average}\n          </div>\n          <div>\n            {Math.sqrt(obj.variance)}\n          </div>\n        </div>\n      ))} */}\n\n      <div className='matchUpHeader'>\n        <div>{away.location} {away.nickname} {normDist ? `(${(normDist.cdf(0) * 100).toFixed(2)}%)` : null} vs {home.location} {home.nickname} {normDist ? `(${((1 - normDist.cdf(0)) * 100).toFixed(2)}%)` : null}</div>\n        <select name=\"matchUp\" value={selectedMatchup} onChange={event => updateMatchup(event.target.value)}>\n          {currentWeekSchedule.map(obj => {\n            const awayTeam = getItem(teams, obj.away.teamId, 'id')\n            const homeTeam = getItem(teams, obj.home.teamId, 'id')\n            if (!homeTeam || !awayTeam) {\n              return null\n            }\n            return <option value={obj.id}>{awayTeam.location} {awayTeam.nickname} vs {homeTeam.location} {homeTeam.nickname}</option>\n          })}\n        </select>\n      </div>\n      {/* {awayNormDist? <div>{JSON.stringify(awayNormDist.ppf(awayRandom))}</div> : null}\n      {homeNormDist? <div>{JSON.stringify(homeNormDist.ppf(homeRandom))}</div> : null}\n      <button onClick={refresh}>Refresh</button> */}\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <LineChart\n          data={graphData}\n          margin={{\n            top: 24, right: 56, left: 40, bottom: 8,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={formatYAxis} />\n          <Legend />\n          <Line type=\"monotone\" strokeWidth={3} dataKey=\"away\" stroke=\"#CC0014\" name={`${away.location} ${away.nickname}`} dot={false} />\n          <Line type=\"monotone\" strokeWidth={3} dataKey=\"home\" stroke=\"#31572c\" name={`${home.location} ${home.nickname}`} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n      <div className='row fullWidth spaceEvenly'>\n      <div className='rankingsTable'>\n        <div className='fullWidth header'>Guy's Division</div>\n        <div className='row row-header'><div className='nameCell'>Team Name</div><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n        {teams.filter(obj => obj.divisionId === 0).sort((a,b)=>{\n          if (b.record.overall.wins - a.record.overall.wins === 0 ){\n            return b.record.overall.pointsFor - a.record.overall.pointsFor\n          }\n          return b.record.overall.wins - a.record.overall.wins\n        }).map(obj => {\n          return <div className='row'><div className='nameCell'>{obj.location} {obj.nickname}</div><div className='valueCell'>{obj.record.overall.wins}</div><div className='valueCell'>{obj.record.overall.losses}</div><div className='valueCell'>{obj.record.overall.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.overall.pointsAgainst.toFixed(2)}</div></div>\n        })}\n      </div>\n      <div className='rankingsTable'>\n      <div className='fullWidth header'>Girl's Division</div>\n      <div className='row row-header'><div className='nameCell'>Team Name</div><div className='valueCell'>Wins</div><div className='valueCell'>Losses</div><div className='valueCell'>Points For</div><div className='valueCell'>Points Against</div></div>\n        {teams.filter(obj => obj.divisionId === 1).sort((a,b)=>{\n          if (b.record.overall.wins - a.record.overall.wins === 0 ){\n            return b.record.overall.pointsFor - a.record.overall.pointsFor\n          }\n          return b.record.overall.wins - a.record.overall.wins\n        }).map(obj => {\n          return <div className='row'><div className='nameCell'>{obj.location} {obj.nickname}</div><div className='valueCell'>{obj.record.overall.wins}</div><div className='valueCell'>{obj.record.overall.losses}</div><div className='valueCell'>{obj.record.overall.pointsFor.toFixed(2)}</div><div className='valueCell'>{obj.record.overall.pointsAgainst.toFixed(2)}</div></div>\n        })}\n      </div>\n      </div>\n    </div>\n  );\n}\n\nconst formatYAxis = (tickItem) => {\n  return `${(tickItem * 100).toFixed(2)}%`\n}\n\nexport default App;\n","/Users/zmoore/Documents/fantasy/fantasy-app/src/reportWebVitals.js",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":38,"nodeType":"27","messageId":"28","endLine":1,"endColumn":46},{"ruleId":"25","severity":1,"message":"29","line":5,"column":70,"nodeType":"27","messageId":"28","endLine":5,"endColumn":77},{"ruleId":"25","severity":1,"message":"30","line":54,"column":18,"nodeType":"27","messageId":"28","endLine":54,"endColumn":30},{"ruleId":"25","severity":1,"message":"31","line":55,"column":16,"nodeType":"27","messageId":"28","endLine":55,"endColumn":26},{"ruleId":"25","severity":1,"message":"32","line":61,"column":10,"nodeType":"27","messageId":"28","endLine":61,"endColumn":22},{"ruleId":"25","severity":1,"message":"33","line":62,"column":10,"nodeType":"27","messageId":"28","endLine":62,"endColumn":22},{"ruleId":"25","severity":1,"message":"34","line":64,"column":10,"nodeType":"27","messageId":"28","endLine":64,"endColumn":20},{"ruleId":"25","severity":1,"message":"35","line":65,"column":10,"nodeType":"27","messageId":"28","endLine":65,"endColumn":20},{"ruleId":"25","severity":1,"message":"36","line":68,"column":9,"nodeType":"27","messageId":"28","endLine":68,"endColumn":16},{"ruleId":"37","severity":1,"message":"38","line":143,"column":6,"nodeType":"39","endLine":143,"endColumn":16,"suggestions":"40"},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","'updateLeague' is assigned a value but never used.","'updateYear' is assigned a value but never used.","'awayNormDist' is assigned a value but never used.","'homeNormDist' is assigned a value but never used.","'awayRandom' is assigned a value but never used.","'homeRandom' is assigned a value but never used.","'refresh' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'teams'. Either include it or remove the dependency array.","ArrayExpression",["41"],{"desc":"42","fix":"43"},"Update the dependencies array to be: [schedule, teams]",{"range":"44","text":"45"},[4228,4238],"[schedule, teams]"]